

rule.xml

    <!-- 注意还得手动设置分区数量 -->
	<function name="mod-long-cnt4" class="io.mycat.route.function.PartitionByMod">
		<!-- how many data nodes -->
		<property name="count">4</property>
	</function>
	<function name="murmur-cnt4"
		class="io.mycat.route.function.PartitionByMurmurHash">
		<property name="seed">0</property><!-- 默认是0 -->
		<property name="count">4</property><!-- 要分片的数据库节点数量，必须指定，否则没法分片 -->
		<property name="virtualBucketTimes">160</property><!-- 一个实际的数据库节点被映射为这么多虚拟节点，默认是160倍，也就是虚拟节点数是物理节点数的160倍 -->
		<!-- <property name="weightMapFile">weightMapFile</property> 节点的权重，没有指定权重的节点默认是1。以properties文件的格式填写，以从0开始到count-1的整数值也就是节点索引为key，以节点权重值为值。所有权重值必须是正整数，否则以1代替 -->
		<!-- <property name="bucketMapPath">/etc/mycat/bucketMapPath</property>
			用于测试时观察各物理节点与虚拟节点的分布情况，如果指定了这个属性，会把虚拟节点的murmur hash值与物理节点的映射按行输出到这个文件，没有默认值，如果不指定，就不会输出任何东西 -->
	</function>


	<tableRule name="tblId-mod-long">
		<rule>
			<columns>tblId</columns>
			<algorithm>mod-long-cnt4</algorithm>
		</rule>
	</tableRule>
	<tableRule name="tblId-sharding-by-murmur">
		<rule>
			<columns>tblId</columns>
			<algorithm>murmur-cnt4</algorithm>
		</rule>
	</tableRule>
	<tableRule name="keyId-sharding-by-murmur">
		<rule>
			<columns>keyId</columns>
			<algorithm>murmur-cnt4</algorithm>
		</rule>
	</tableRule>




